function [cond_order, rand_cond_order] = ISN_ConditionBalancing(num_cond,plts)
%UNTITLED5 Summary of this function goes here
%   Detailed explanation goes here
if nargin <2
    plts = 1;
end
%% DETERMINE IF THE NUMBER OF CONDITIONS IS EVEN OR ODD
% This is required to allow for the balanced square (squares if odd) to be
% correctly filled
odd_n = mod(num_cond,2);
if odd_n ==1
    odd_i = 1:2:num_cond;
    even_i = 2:2:num_cond-1;
    odd_l = length(odd_i);
    even_l = length(even_i);
else
    odd_i = 1:2:num_cond-1;
    even_i = 2:2:num_cond;
    odd_l = length(odd_i);
    even_l = length(even_i);
end
%% CREATE 1st ROW OF BALANCED SQUARE
row1(odd_i) = 1:odd_l;
row1(even_i) = num_cond:-1:num_cond-(even_l-1);
if odd_n == 1
    row2(even_i) = 1:even_l;
    row2(odd_i) = num_cond:-1:num_cond-(odd_l-1);
end

%% FILL REST OF THE BALANCED SQUARE(S)
sq1 = zeros(num_cond,num_cond);
sq1(1,:) = row1;
for n = 2:num_cond
    for i = 1:num_cond
        sq1(n,i) = sq1(n-1,i)+1;
        if sq1(n,i) > num_cond
            sq1(n,i) = 1;
        end
    end
end
if odd_n == 1
    sq2 = zeros(num_cond,num_cond);
    sq2(1,:) = row2;
    for n = 2:num_cond
        for i = 1:num_cond
            sq2(n,i) = sq2(n-1,i)+1;
            if sq2(n,i) > num_cond
                sq2(n,i) = 1;
            end
        end
    end
end
tmp = sq1;
if odd_n == 1
    tmp = [tmp;sq2];
end
%% CHECK THAT EACH COLUMN IS COUNTERBALANCED
if plts == 1
h1 = figure;
figtitle = 'Check_counterbalance_in_each_column';
set(h1,'name',figtitle,'numbertitle','off');
y = floor(sqrt(num_cond));
x = ceil(num_cond/y);
for n = 1:num_cond
    subplot(y,x,n)
    histogram(tmp(:,n))
    xlabel('Stim Condition')
    ylabel('No. of Repetitions')
    title(['Column no. ' num2str(n)])
end
%% CHECK THAT THE ORDER IS COUNTERBALANCED
tmp_c = cell(num_cond,1);
for n = 1:(size(tmp,2)-1)
    for m = 1:size(tmp,1)
        tmpp = tmp(m,n);
        tmppp = tmp(m,n+1);
        tmp_c{tmpp} = [tmp_c{tmpp},tmppp];
    end
end
h1 = figure;
figtitle = 'Check_cond_order_is_not_biased';
set(h1,'name',figtitle,'numbertitle','off');
for n = 1:num_cond
    subplot(y,x,n)
    histogram(tmp_c{n})
    xlabel('Stim Condition')
    ylabel('No. of Repetitions')
    title(['Condition no. ' num2str(n)])
end
end
%% 
cond_order = tmp;
ind = 1:size(cond_order,1);
rand = randperm(size(cond_order,1),size(cond_order,1));
ind=ind(rand);
rand_cond_order = cond_order(rand,:);
end

function [am_sig] = ISN_GenAM(p_F,c_F,dur,Fs)
dt = 1/Fs;
t = (dt:dt:dur);
sine_wave = 0.5*cos(2*pi*c_F*t+pi);
sine_wave2 = 0.5*sin(2*pi*(c_F+p_F)*t+(pi/2));
am_sig = sine_wave + sine_wave2;
end

function [sine_wave] = ISN_GenSine(F,dur,Fs,phs)
if nargin <4
    phs = 0;
end
dt = 1/Fs;
t = (dt:dt:dur);
sine_wave = sin(2*pi*F*t+phs);
end

function button = questdlgtimeout(delay, varargin)
% questdlg function with timeout property
%
% Based on timeoutDlg by MathWorks Support Team
% https://uk.mathworks.com/matlabcentral/answers/96229-how-can-i-have-a-dialog-box-or-user-prompt-with-a-time-out-period
%
% button = questdlgtimeout(delay,'qstring')
% button = questdlgtimeout(delay,qstring,title)
% button = questdlgtimeout(delay,qstring,title,default)
% button = questdlgtimeout(delay,qstring,title,str1,str2,default)
% button = questdlgtimeout(delay,qstring,title,str1,str2,str3,default)
% button = questdlgtimeout(delay,qstring,title, ..., options)
%
% INPUT ARGUMENTS
% delay       Duration in second during withich the dialog is maintained
%
% var1,var2,...
%             Accepts input arguments for builtin questdlg. See
%             documentation of questdlg
%
% OUTPUT ARGUMENTS
% button       The dialog has three default buttons, Yes, No, and Cancel.
%              If the user presses one of these three buttons, button is
%              set to the name of the button pressed. If the user presses
%              the close button on the dialog without making a choice,
%              button returns as an empty character vector (''). If the
%              user presses the Return key, button returns with a value of
%              'Yes'.
%
%              If you provide default or options, button will be the
%              default value.
%
%
% See also
% questdlg, timer, scr20170308_154424_questdlgtimeout
%
% Written by Kouichi C. Nakamura Ph.D.
% MRC Brain Network Dynamics Unit
% University of Oxford
% 08-Mar-2017 16:06:58

f1 = findall(0, 'Type', 'figures');
t = timer('TimerFcn', {@closeit f1}, 'StartDelay', delay);
start(t);

dlg = @questdlg;

% Call the dialog
button = dlg(varargin{:});

if isempty(button)
  if length(varargin) >= 3
      if  isstruct(varargin{end})
          button = varargin{end}.Default;
      elseif ischar(varargin{end})

            button = varargin{end};

        else
            error('unexpected syntax')
        end
    else % no default provided
        % leave button empty
    end
end

% Delete the timer
if strcmp(t.Running, 'on')
  stop(t);
end
delete(t);

function closeit(src, event, f1)
% disp('Time out');
f2 = findall(0, 'Type', 'figure');
fnew = setdiff(f2, f1);
if ishandle(fnew)
  close(fnew);
end
